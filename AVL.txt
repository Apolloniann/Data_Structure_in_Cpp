#include<iostream>
using namespace std;
struct node {
	int data;
	node* left;
	node *right;
};

class BST {
public:

	node *root;
	node *temp;
	int left;
	int right;
	
	BST()
	{
		root = temp = NULL;

	}
	void insert(node *temp, int value)
	{
		
		if (root == NULL)
		{
			root = new node;
			root->left = NULL;
			root->right = NULL;
			root->data = value;
			//root->count_repetition = 0;
			return;
		}

		
		else if (temp->data > value)
		{
			if (temp->left == NULL)
			{
				temp->left = new node;
				temp = temp->left;
				temp->data = value;
				temp->left = NULL;
				temp->right = NULL;
				//temp->count_repetition = 0;
				return;
			}
			else
			{
				insert(temp->left, value);
				//cout <<"Data is:"<< temp->data << endl;
				General_height(temp, value);
			}

		}
		else if (temp->data < value)
		{

			if (temp->right == NULL)
			{
				temp->right = new node;
				temp = temp->right;
				temp->data = value;
				temp->left = NULL;
				temp->right = NULL;
				//temp->count_repetition = 0;
				return;
			}
			else {

				insert(temp->right, value);
				//cout << "Data is:" << temp->data << endl;
				General_height(temp, value);
			}
		}
	}
	void General_height(node* temp, int value)
	{
		int height_ = 0;
		int left_height = height(temp->left);
		int right_height = height(temp->right);
		
		height_ = left_height - right_height;

		if (height_ <= -2)
		{
			if (temp->data<value&&temp->right->data<value)
				zag_zag(temp);
			else
				zag_zig(temp);

		}
		else if (height_ >= 2)
		{

			if (temp->data>value&&temp->left->data>value)
				zig_zig(temp);
			else zig_zag(temp);
		}
	}
	void zag_zag(node* temp) {
		node *temp1 = new node;
		temp1->data = temp->data;
		temp1->right = temp->right->left;
		temp1->left = temp->left;
		temp->data = temp->right->data;
		temp->left = temp1;
		node *replace = new node;
		replace = temp->right;
		temp->right = temp->right->right;
		delete replace;
		replace = NULL;
		return;

	}
	void zig_zig(node* temp) {
		
		node *temp1 = new node;
		temp1->data = temp->data;
		temp1->left = temp->left->right;
		temp1->right = temp->right;
		temp->data = temp->left->data;
		temp->right = temp1;
		node *replace = new node;
		replace = temp->left;
		temp->left = temp->left->left;
		delete replace;
		replace = NULL;
		return;

	}
	void zag_zig(node* temp) {

		node* temp1 = temp->right;
		temp->right = temp1->left;
		temp1->left = temp1->left->right;
		temp->right->right = temp1;
		zag_zag(temp);
	}
	void zig_zag(node* temp) {

		node* temp_1 = temp->left;
		temp->left = temp_1->right;
		temp_1->right = temp->left->left;
		temp->left->left = temp_1;
		zig_zig(temp);
	}

	int height(node *temp)
	{
		if (temp == NULL)
		{
			return 0;
		}
		else
		{
			int LD = height(temp->left);
			int RD = height(temp->right);

			if (LD > RD)
			{
				return (LD + 1);
			}

			else
			{
				return (RD + 1);
			}
		}
	}

	
	void print(node *temp)
	{
		if (temp == NULL)
		{
			return;
		}
		print(temp->left);
		cout << temp->data << " ";
		print(temp->right);
	}
	

	
	


};
void main()
{
	BST B_1;
	int x = 0;
	for (int i = 1; i <= 4; i++)
	{
		cout << "Enter the value:" << endl;
		cin >> x;
		B_1.insert(B_1.root, x);
	}
	//B_1.traversal(B_1.root);
	cout << endl;
	B_1.print(B_1.root);
	cout << endl;
}
